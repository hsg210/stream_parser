!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CC	Makefile	/^CC:=g++$/;"	m
CFLAGS	Makefile	/^CFLAGS := -g -Wall -O3 -std=c++11$/;"	m
CPPFLAGS	Makefile	/^CPPFLAGS := $(CFLAGS)$/;"	m
CRC_32	tsparser.h	/^    uint32_t CRC_32                            : 32; $/;"	m	struct:__anon4
CRC_32	tsparser.h	/^    uint32_t CRC_32                       : 32;  \/\/CRC32 checksum.$/;"	m	struct:__anon3
DEPS	Makefile	/^DEPS := $(patsubst %.o,%.d,$(OBJS))$/;"	m
Debug	log.h	/^	Debug,$/;"	e	enum:LogLevel
ES_info_length	tsparser.h	/^	uint32_t ES_info_length                    : 12; \/\/前两位bit为00。该域指示跟随其后的描述相关节目元素的byte数  $/;"	m	struct:TS_PMT_Stream
EXECUTABLE	Makefile	/^EXECUTABLE := tsparser# 可执行文件名$/;"	m
Error	log.h	/^	Error,$/;"	e	enum:LogLevel
INCLUDES	Makefile	/^INCLUDES:=.           # 头文件目录$/;"	m
IOMethod	streamio.cpp	/^IOMethod::IOMethod(char *url):m_url(url)$/;"	f	class:STREAMIO::IOMethod
IOMethod	streamio.cpp	/^IOMethod::IOMethod(char *url,SCHEME scheme):m_url(url),m_scheme(scheme)$/;"	f	class:STREAMIO::IOMethod
IOMethod	streamio.h	/^		IOMethod(){};$/;"	f	class:STREAMIO::IOMethod
IOMethod	streamio.h	/^	class IOMethod{$/;"	c	namespace:STREAMIO
Info	log.h	/^	Info,$/;"	e	enum:LogLevel
LIBDIR	Makefile	/^LIBDIR:=              # 静态库目录$/;"	m
LIBS	Makefile	/^LIBS :=               # 静态库文件名$/;"	m
Log	log.h	14;"	d
LogLevel	log.h	/^enum LogLevel {$/;"	g
MISSING_DEPS	Makefile	/^MISSING_DEPS := $(filter-out $(wildcard $(DEPS)),$(DEPS))$/;"	m
MISSING_DEPS_SOURCES	Makefile	/^MISSING_DEPS_SOURCES := $(wildcard $(patsubst %.d,%.cpp,$(MISSING_DEPS)))$/;"	m
OBJS	Makefile	/^OBJS := $(patsubst %.cpp,%.o,$(SRCS))$/;"	m
OPCR	tsparser.h	/^	uint64_t OPCR;$/;"	m	struct:__anon5
OptType	main.cpp	/^enum OptType{$/;"	g	file:
PAT_st	tsparser.h	/^} PAT_st;$/;"	t	typeref:struct:__anon3
PCR	tsparser.h	/^	uint64_t PCR;$/;"	m	struct:__anon5
PCR_PID	tsparser.h	/^    uint16_t PCR_PID                        : 13; \/\/指明TS包的PID值，该TS包含有PCR域，  $/;"	m	struct:__anon4
PES_Header_st	tsparser.h	/^} PES_Header_st;$/;"	t	typeref:struct:__anon6
PID	tsparser.h	/^    uint16_t PID:13;                         \/\/byte[1] byte[2]$/;"	m	struct:__anon5
PMT_Stream	tsparser.h	/^    std::vector<TS_PMT_Stream> PMT_Stream;  \/\/每个元素包含8位, 指示特定PID的节目元素包的类型。该处PID由elementary PID指定  $/;"	m	struct:__anon4
PMT_st	tsparser.h	/^} PMT_st;$/;"	t	typeref:struct:__anon4
RM-F	Makefile	/^RM-F := rm -f$/;"	m
SCHEME	streamio.h	/^	enum SCHEME {$/;"	g	namespace:STREAMIO
SRCDIR	Makefile	/^SRCDIR:=              # 除了当前目录外，其他的源代码文件目录$/;"	m
SRCS	Makefile	/^SRCS := $(wildcard *.cpp) $(wildcard $(addsuffix \/*.cpp, $(SRCDIR)))$/;"	m
STREAMIO	streamio.cpp	/^namespace STREAMIO{$/;"	n	file:
STREAMIO	streamio.h	/^namespace STREAMIO{$/;"	n
SYNCBYTE	tsparser.h	/^		const static uint8_t SYNCBYTE=0x47;$/;"	m	class:TS_Parser
SYNCBYTE	tsparser.h	/^	uint8_t SYNCBYTE;   \/\/byte[0]$/;"	m	struct:__anon5
StreamType	ts_stream_type.h	/^}StreamType;$/;"	v	typeref:struct:__anon2
TS_Header_st	tsparser.h	/^} TS_Header_st;$/;"	t	typeref:struct:__anon5
TS_PAT_Program	tsparser.h	/^typedef struct TS_PAT_Program$/;"	s
TS_PAT_Program	tsparser.h	/^}TS_PAT_Program;$/;"	t	typeref:struct:TS_PAT_Program
TS_PKG_LENGTH	tsparser.h	/^const uint8_t TS_PKG_LENGTH = 188;$/;"	v
TS_PMT_Stream	tsparser.h	/^typedef struct TS_PMT_Stream  $/;"	s
TS_PMT_Stream	tsparser.h	/^}TS_PMT_Stream;$/;"	t	typeref:struct:TS_PMT_Stream
TS_Parser	tsparser.cpp	/^TS_Parser::TS_Parser(char * file)$/;"	f	class:TS_Parser
TS_Parser	tsparser.h	/^class TS_Parser{$/;"	c
_3_flags	tsparser.h	/^	uint8_t _3_flags;$/;"	m	struct:__anon5
_5_flags	tsparser.h	/^	uint8_t _5_flags:5;$/;"	m	struct:__anon5
adaptation_field_control	tsparser.h	/^   	uint8_t adaptation_field_control:2;      \/\/byte[3]$/;"	m	struct:__anon5
adaptation_field_extension_length	tsparser.h	/^	uint8_t adaptation_field_extension_length;$/;"	m	struct:__anon5
adaptation_field_length	tsparser.h	/^	uint8_t adaptation_field_length;$/;"	m	struct:__anon5
continuity_counter	tsparser.h	/^	uint8_t continuity_counter:4;            \/\/byte[3]$/;"	m	struct:__anon5
current_next_indicator	tsparser.h	/^    uint8_t current_next_indicator            : 1; \/\/当该位置1时，当前传送的Program map section可用；  $/;"	m	struct:__anon4
current_next_indicator	tsparser.h	/^    uint8_t current_next_indicator       : 1; \/\/valid current or next.$/;"	m	struct:__anon3
descriptor	tsparser.h	/^	uint32_t descriptor;  $/;"	m	struct:TS_PMT_Stream
discontinuity_indicator	tsparser.h	/^	uint8_t discontinuity_indicator:1;$/;"	m	struct:__anon5
eFile	streamio.h	/^		eFile, \/\/file:\/\/$/;"	e	enum:STREAMIO::SCHEME
eFtp	streamio.h	/^		eFtp,  \/\/ftp:\/\/$/;"	e	enum:STREAMIO::SCHEME
eHttp	streamio.h	/^		eHttp, \/\/ http:\/\/$/;"	e	enum:STREAMIO::SCHEME
eMediaInfo	main.cpp	/^	eMediaInfo$/;"	e	enum:OptType	file:
eOffsetInfo	main.cpp	/^	eOffsetInfo,$/;"	e	enum:OptType	file:
ePKGNumInfo	main.cpp	/^	ePKGNumInfo,$/;"	e	enum:OptType	file:
ePSIInfo	main.cpp	/^	ePSIInfo,$/;"	e	enum:OptType	file:
eUnknown	streamio.h	/^		eUnknown,$/;"	e	enum:STREAMIO::SCHEME
elementary_PID	tsparser.h	/^	uint32_t elementary_PID                    : 13; \/\/该域指示TS包的PID值。这些TS包含有相关的节目元素  $/;"	m	struct:TS_PMT_Stream
elementary_stream_priority_indicator	tsparser.h	/^	uint8_t elementary_stream_priority_indicator:1;$/;"	m	struct:__anon5
file_path	main.cpp	/^static char * file_path = NULL;$/;"	v	file:
g_level	tsparser.cpp	/^LogLevel g_level = Info;$/;"	v
getLevel	log.cpp	/^LogLevel getLevel(){$/;"	f
getOffsetOfPid	tsparser.cpp	/^uint64_t TS_Parser::getOffsetOfPid(uint16_t pid)$/;"	f	class:TS_Parser
io_read	streamio.cpp	/^size_t IOMethod::io_read(uint8_t *buf, size_t size)$/;"	f	class:STREAMIO::IOMethod
last_section_number	tsparser.h	/^    uint8_t last_section_number            : 8; \/\/固定为0x00  $/;"	m	struct:__anon4
last_section_number	tsparser.h	/^    uint8_t last_section_number          : 8;  \/\/last section number$/;"	m	struct:__anon3
local_buffs	tsparser.h	/^		uint8_t  local_buffs[TS_PKG_LENGTH * 200]; \/\/ 200 times length.$/;"	m	class:TS_Parser
m_fd	streamio.h	/^		int m_fd;$/;"	m	class:STREAMIO::IOMethod
m_iomethod	tsparser.h	/^		STREAMIO::IOMethod * m_iomethod;$/;"	m	class:TS_Parser
m_scheme	streamio.h	/^		SCHEME m_scheme;$/;"	m	class:STREAMIO::IOMethod
m_url	streamio.h	/^		char * m_url;$/;"	m	class:STREAMIO::IOMethod
main	main.cpp	/^int main(int argc, char ** argv)$/;"	f
network_PID	tsparser.h	/^    uint16_t network_PID                  : 13; \/\/NIT PID, 节目号为0时对应的PID为network_PID$/;"	m	struct:__anon3
offset	main.cpp	/^	int offset;$/;"	m	struct:option	file:
option	main.cpp	/^struct option{$/;"	s	file:
opts	main.cpp	/^static struct option opts;$/;"	v	typeref:struct:option	file:
parsePAT	tsparser.cpp	/^void TS_Parser::parsePAT()$/;"	f	class:TS_Parser
parsePMT	tsparser.cpp	/^void TS_Parser::parsePMT()$/;"	f	class:TS_Parser
parse_option	main.cpp	/^void parse_option(int argc, char ** argv)$/;"	f
pat_info	tsparser.h	/^		PAT_st pat_info;$/;"	m	class:TS_Parser
payload_unit_start_indicator	tsparser.h	/^	uint16_t payload_unit_start_indicator:1; \/\/byte[1]$/;"	m	struct:__anon5
pkg_num	main.cpp	/^	int pkg_num;$/;"	m	struct:option	file:
pmt_info	tsparser.h	/^		PMT_st pmt_info;$/;"	m	class:TS_Parser
print_pat	tsparser.cpp	/^void TS_Parser::print_pat()$/;"	f	class:TS_Parser
print_pmt	tsparser.cpp	/^void TS_Parser::print_pmt()$/;"	f	class:TS_Parser
printf_ts_header	tsparser.cpp	/^void printf_ts_header(const TS_Header_st & st)$/;"	f
printusage	main.cpp	/^void printusage()$/;"	f
program	tsparser.h	/^    std::vector<TS_PAT_Program> program;$/;"	m	struct:__anon3
program_info_length	tsparser.h	/^    uint16_t program_info_length            : 12; \/\/前两位bit为00。该域指出跟随其后对节目信息的描述的byte数。  $/;"	m	struct:__anon4
program_map_PID	tsparser.h	/^    uint32_t program_map_PID  :  13;     \/\/ program map pid.$/;"	m	struct:TS_PAT_Program
program_number	tsparser.h	/^    uint16_t program_number                    : 16;\/\/ 指出该节目对应于可应用的Program map PID  $/;"	m	struct:__anon4
program_number	tsparser.h	/^    uint32_t program_number   :  16;     \/\/ program number.$/;"	m	struct:TS_PAT_Program
random_access_indicator	tsparser.h	/^	uint8_t random_access_indicator:1;$/;"	m	struct:__anon5
reserved_1	tsparser.h	/^    uint16_t reserved_1                      : 2; \/\/0x03  $/;"	m	struct:__anon4
reserved_1	tsparser.h	/^    uint16_t reserved_1                   : 2; \/\/ resolved$/;"	m	struct:__anon3
reserved_2	tsparser.h	/^    uint8_t reserved_2                        : 2; \/\/0x03  $/;"	m	struct:__anon4
reserved_2	tsparser.h	/^    uint8_t reserved_2                   : 2;  \/\/ resolved$/;"	m	struct:__anon3
reserved_3	tsparser.h	/^    uint16_t reserved_3                        : 3; \/\/0x07  $/;"	m	struct:__anon4
reserved_3	tsparser.h	/^    uint16_t reserved_3                   : 3; \/\/ resolved$/;"	m	struct:__anon3
reserved_4	tsparser.h	/^    uint16_t reserved_4                        : 4; \/\/预留为0x0F  $/;"	m	struct:__anon4
reserved_5	tsparser.h	/^    uint8_t reserved_5                        : 3; \/\/0x07  $/;"	m	struct:__anon4
reserved_6	tsparser.h	/^    uint8_t reserved_6                        : 4; \/\/0x0F  $/;"	m	struct:__anon4
section_length	tsparser.h	/^    uint16_t section_length                  : 12;\/\/首先两位bit置为00，它指示段的byte数，由段长度域开始，包含CRC。  $/;"	m	struct:__anon4
section_length	tsparser.h	/^    uint16_t section_length              : 12; \/\/表示从下一个字段开始到CRC32(含)之间有用的字节数$/;"	m	struct:__anon3
section_number	tsparser.h	/^    uint8_t section_number                    : 8; \/\/固定为0x00  $/;"	m	struct:__anon4
section_number	tsparser.h	/^    uint8_t section_number               : 8; \/\/section number. PAT may transfered by multi-section，first section is 00，and increased 1 every section,max is 256.$/;"	m	struct:__anon3
section_syntax_indicator	tsparser.h	/^	uint16_t section_syntax_indicator        : 1; \/\/always = 0x01  $/;"	m	struct:__anon4
section_syntax_indicator	tsparser.h	/^    uint16_t section_syntax_indicator     : 1; \/\/always eq 1.$/;"	m	struct:__anon3
set_pat	tsparser.cpp	/^void TS_Parser::set_pat(PAT_st & pat, uint32_t offset)$/;"	f	class:TS_Parser
set_pmt	tsparser.cpp	/^void TS_Parser::set_pmt(PMT_st & pmt, uint32_t offset)$/;"	f	class:TS_Parser
set_ts_header	tsparser.cpp	/^void TS_Parser::set_ts_header(TS_Header_st & header, uint32_t offset)$/;"	f	class:TS_Parser
spice_countdown	tsparser.h	/^	uint8_t spice_countdown;$/;"	m	struct:__anon5
stream_type	tsparser.h	/^	uint8_t  stream_type                       : 8; \/\/指示特定PID的节目元素包的类型。该处PID由elementary PID指定  $/;"	m	struct:TS_PMT_Stream
sync_offset	tsparser.cpp	/^void TS_Parser::sync_offset()$/;"	f	class:TS_Parser
table_id	tsparser.h	/^	uint8_t table_id                        : 8; \/\/always 0x02, mean PMT table $/;"	m	struct:__anon4
table_id	tsparser.h	/^    uint8_t table_id                     : 8; \/\/always eq 0x00 ，meaning PAT table.$/;"	m	struct:__anon3
transport_error_indicator	tsparser.h	/^	uint16_t transport_error_indicator:1;    \/\/byte[1]$/;"	m	struct:__anon5
transport_priority	tsparser.h	/^	uint16_t transport_priority:1;           \/\/byte[1]$/;"	m	struct:__anon5
transport_private_data_length	tsparser.h	/^	uint8_t transport_private_data_length;$/;"	m	struct:__anon5
transport_scrambing_control	tsparser.h	/^	uint8_t transport_scrambing_control:2;   \/\/byte[3]$/;"	m	struct:__anon5
transport_stream_id	tsparser.h	/^    uint16_t transport_stream_id          : 16; \/\/stream id ID，区别于一个网络中其它多路复用的流$/;"	m	struct:__anon3
ts_private_data	tsparser.h	/^	uint8_t * ts_private_data;$/;"	m	struct:__anon5
type	main.cpp	/^	OptType type;$/;"	m	struct:option	file:
type_num	ts_stream_type.h	/^	char type_num;$/;"	m	struct:__anon2
type_string	ts_stream_type.h	/^	char * type_string;$/;"	m	struct:__anon2
version_number	tsparser.h	/^    uint8_t version_number                    : 5; \/\/指出TS流中Program map section的版本号  $/;"	m	struct:__anon4
version_number	tsparser.h	/^    uint8_t version_number               : 5; \/\/range: 0-31，PAT version.$/;"	m	struct:__anon3
zero	tsparser.h	/^    uint16_t zero                            : 1; \/\/0x01  $/;"	m	struct:__anon4
zero	tsparser.h	/^    uint16_t zero                         : 1; \/\/0$/;"	m	struct:__anon3
~IOMethod	streamio.cpp	/^IOMethod::	~IOMethod()$/;"	f	class:STREAMIO::IOMethod
~TS_Parser	tsparser.cpp	/^TS_Parser::~TS_Parser()$/;"	f	class:TS_Parser
